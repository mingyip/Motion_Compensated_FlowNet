from mpl_toolkits.mplot3d.axes3d import Axes3D
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d.proj3d import proj_transform

import matplotlib.pyplot as plt
import numpy as np

class Arrow3D(FancyArrowPatch):
    def __init__(self, x, y, z, dx, dy, dz, *args, **kwargs):
        super().__init__((0,0), (0,0), *args, **kwargs)
        self._xyz = (x,y,z)
        self._dxdydz = (dx,dy,dz)

    def draw(self, renderer):
        x1,y1,z1 = self._xyz
        dx,dy,dz = self._dxdydz
        x2,y2,z2 = (x1+dx,y1+dy,z1+dz)

        xs, ys, zs = proj_transform((x1,x2),(y1,y2),(z1,z2), renderer.M)
        self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))
        super().draw(renderer)
    
def _arrow3D(ax, x, y, z, dx, dy, dz, *args, **kwargs):
    '''Add an 3d arrow to an `Axes3D` instance.'''

    arrow = Arrow3D(x, y, z, dx, dy, dz, *args, **kwargs)
    ax.add_artist(arrow)

setattr(Axes3D,'arrow3D',_arrow3D)

data = \
np.array([[1506117914.494931, -43.22074082489372, 6.2053319257735176, 8.932008810976122, -0.1532029059222922, -0.7650681619553826, 0.02249731729706523, 0.6250547559163222],
[1506117914.544887, -43.39555088895172, 6.216946983793827, 8.864956660910666, -0.15330889875004128, -0.7708268342080883, 0.023559695736506275, 0.6178732183592273],
[1506117914.644735, -43.736977375774444, 6.237546018122056, 8.718164677079967, -0.15405588554812302, -0.7815075167361012, 0.0259435895803664, 0.6040196317775123],
[1506117914.744671, -44.07291930676758, 6.255904511190677, 8.558735693773912, -0.1533963497108329, -0.7921253154943945, 0.028347316954431538, 0.5900876833740754],
[1506117914.7946742, -44.238646395438934, 6.264356053994338, 8.475503449718076, -0.15310489222868434, -0.7976004390923301, 0.029133994708072937, 0.5827037342318262],
[1506117914.8446412, -44.40179955839663, 6.272475183708777, 8.391856395038717, -0.15240747841490793, -0.802970771946128, 0.030547454533495343, 0.5753926945530095],
[1506117914.894637, -44.56096089477237, 6.279818186070259, 8.30578119247587, -0.15131710868525713, -0.8081437298480553, 0.031343474319174745, 0.5683523828963954],
[1506117914.944637, -44.71672906207421, 6.286489810699754, 8.217666028412355, -0.15019474314138065, -0.8133964759855381, 0.03136966918545178, 0.5611093082833302],
[1506117914.994666, -44.87062061735465, 6.292639784948443, 8.127300093195437, -0.14981360826052997, -0.8183509449535793, 0.03282895075829444, 0.5538771286717424],
[1506117915.0446992, -45.0221327726437, 6.298150686834292, 8.034201446297793, -0.1492118523941042, -0.8233174040378257, 0.033369232693073146, 0.5465992770055697],
[1506117915.1446002, -45.32164664075052, 6.307440671398673, 7.838227885052657, -0.14938758695059823, -0.8326439943839574, 0.034877310584563906, 0.5321380466455989],
[1506117915.1946342, -45.47150043972471, 6.311446869163, 7.735078936416113, -0.14854582406070332, -0.8374501393841776, 0.035118418260869276, 0.524764803410445],
[1506117915.2447052, -45.61944122778234, 6.314851078689307, 7.629173988874101, -0.1489825419656095, -0.8418821640207801, 0.03715663821642644, 0.5173567515067409],
[1506117915.294662, -45.76683600907285, 6.317565158446133, 7.518776222171395, -0.14961516247447768, -0.8464835514127725, 0.037089302734233415, 0.5096128765720547],
[1506117915.3447342, -45.91275215117592, 6.319794778155111, 7.4057203825912685, -0.1492382969558603, -0.8511144893111056, 0.0370754152002166, 0.5019536536316298],
[1506117915.444683, -46.19728677494579, 6.322352367247556, 7.17225187944401, -0.150636403621707, -0.8597952843296659, 0.036280049907046606, 0.4865639741361141],
[1506117915.544779, -46.47876783850306, 6.323599293034135, 6.931152611370008, -0.15143574135355212, -0.8680668182259486, 0.0369359358986096, 0.4713416510081314],
[1506117915.5947802, -46.6196918041698, 6.323975351554093, 6.808625063563278, -0.15219295499302765, -0.8721430639160175, 0.03738794765598975, 0.46347159770987517],
[1506117915.6948411, -46.8972014338532, 6.322889417733039, 6.552620937317502, -0.15071446148163015, -0.8801860630166258, 0.038278889380715164, 0.44843324163065124],
[1506117915.794866, -47.16457197027272, 6.319093741151903, 6.28458817889927, -0.14896362854724743, -0.8878478411587168, 0.041208147599376715, 0.4334027421363086],
[1506117915.8449502, -47.29206349726079, 6.315984372610506, 6.146689473933547, -0.1473943828186653, -0.8918482115144527, 0.042426001133848756, 0.42553695251971607],
[1506117915.9449341, -47.53309008204422, 6.307038223408389, 5.863057742405173, -0.14545437222281066, -0.8993273969095975, 0.04305339669929498, 0.410121523211999],
[1506117916.045083, -47.754894824070824, 6.295442435532927, 5.576218540297408, -0.143998718189426, -0.9061793989853936, 0.04504931466013656, 0.395061799295915],
[1506117916.1450381, -47.95843621409172, 6.281696748377017, 5.28915154769621, -0.14162224987093022, -0.913133559574511, 0.046088099481233866, 0.37948139322829333],
[1506117916.2451131, -48.14229656070825, 6.2653188045731705, 4.999821045099601, -0.14075792646438698, -0.919523688357827, 0.04754120648244306, 0.3638725413829105],
[1506117916.345164, -48.31369877603035, 6.246885443171321, 4.705806339022342, -0.13931217817140926, -0.9257631664397177, 0.04861909429151858, 0.3481247769793438],
[1506117916.445229, -48.48113781375321, 6.2275218539675885, 4.408353650404992, -0.1377619949591486, -0.9319082284537955, 0.048826256067344545, 0.3319407826758121],
[1506117916.5453072, -48.6485573592438, 6.207940384363955, 4.1092477315853415, -0.13639343725023825, -0.9376170341026159, 0.04935188157174307, 0.31596759235878924],
[1506117916.64536, -48.813721972081176, 6.187871871291554, 3.8085190901157215, -0.13577716058186898, -0.9429247672046772, 0.05040378225516538, 0.2998614760030124],
[1506117916.745461, -48.970123375429075, 6.166159620989575, 3.5028134592550204, -0.13527353727544789, -0.9478449874851206, 0.05273853702322437, 0.2837421303313386],
[1506117916.8455641, -49.11613055011746, 6.142271408026356, 3.190082549110387, -0.134489537950719, -0.9525846002453718, 0.052953559549068385, 0.26775187037302106],
[1506117916.945636, -49.25107487724295, 6.116272978241022, 2.8708481292653363, -0.13308224173950325, -0.9570040399105177, 0.05363316426534385, 0.25210289212824116],
[1506117917.045804, -49.37612188293035, 6.088081814095617, 2.543570851842036, -0.13129042699660157, -0.9611737392163968, 0.054420177220224374, 0.23652972568186345],
[1506117917.1458292, -49.4901899711068, 6.05718878180599, 2.205269418592994, -0.12838197726792772, -0.965230911917921, 0.054794970235639825, 0.221008746043569],
[1506117917.2459052, -49.592235142577294, 6.023742802207847, 1.858247035049747, -0.12627063415396367, -0.9688337986562086, 0.055698166432513525, 0.20570491435013205],
[1506117917.34605, -49.68149944012738, 5.9882291957670555, 1.507005407057338, -0.12440873587197812, -0.9721648734276545, 0.056002586422382275, 0.19047738875292372],
[1506117917.4461062, -49.75429293513394, 5.949639390769934, 1.146982019694828, -0.12299243652187003, -0.97510894657277, 0.056545696214736, 0.17560748022721048],
[1506117917.546164, -49.81090862164259, 5.908469021008502, 0.7816210841377922, -0.12163398990116403, -0.9777266927181725, 0.05728677868532977, 0.1611642386975537],
[1506117917.646289, -49.854226174203454, 5.865889173879128, 0.41769445089463453, -0.12069149059088596, -0.9804528870959356, 0.05702498586212689, 0.1445470555619013],
[1506117917.746314, -49.89274046059241, 5.822916621245206, 0.0549293348031199, -0.11919376790769175, -0.9825583902087136, 0.05660191889842185, 0.13102701362490024],
[1506117917.846362, -49.932187518850384, 5.779966570947944, -0.3088290566243561, -0.11718917963510711, -0.9843937054044057, 0.05714127526088826, 0.11819730791436334],
[1506117917.8964322, -49.9539989770361, 5.758451931615088, -0.4924590474177748, -0.11736474294465113, -0.9854195690351963, 0.05686977345331503, 0.10926856338126745],
[1506117917.996452, -49.992306251260366, 5.714307142354588, -0.8641468589411998, -0.11584815987804448, -0.9868200127884008, 0.057017546590063396, 0.09754212215254579],
[1506117918.096569, -50.023747867450425, 5.66887418925044, -1.23929199772628, -0.115282153145476, -0.9879540961156948, 0.05684840796652606, 0.08616836801301826],
[1506117918.196686, -50.04781774138386, 5.622085192955682, -1.6183904543510392, -0.11417415088982943, -0.9891486965028324, 0.05702437774923647, 0.07278282639265998],
[1506117918.2967782, -50.06781232640856, 5.573743010604354, -2.0057843560061634, -0.1135067762397011, -0.9898763004626927, 0.057584723761919296, 0.06281019916596753],
[1506117918.396826, -50.080511777891836, 5.523315996402801, -2.4023714233909574, -0.1125249454791303, -0.9905802849212729, 0.05690393666836315, 0.053392675171016875],
[1506117918.446795, -50.082400351517684, 5.497234403209251, -2.603791198324622, -0.11163077505205285, -0.9908239854250461, 0.058095723333066916, 0.04930808146916874],
[1506117918.496866, -50.08554305382159, 5.471005473854623, -2.8068433858912636, -0.1106924298341526, -0.9913088933744234, 0.05697546468270314, 0.0425165887426782],
[1506117918.546848, -50.0866909323134, 5.4445752997958285, -3.0099619319974167, -0.11001555117647846, -0.9915341113300111, 0.05710587450515353, 0.03867303537574821]])

def quat_to_rot(qx, qy, qz, qw):
    Xx = 1-2*np.multiply(qy, qy)-2*np.multiply(qz, qz)
    Xy = 2*np.multiply(qx, qy)+2*np.multiply(qz, qw)
    Xz = 2*np.multiply(qx, qz)-2*np.multiply(qy, qw)
    
    
    Yx = 2*np.multiply(qx, qy)-2*np.multiply(qz, qw)
    Yy = 1-2*np.multiply(qx, qx)-2*np.multiply(qz, qz)
    Yz = 2*np.multiply(qy, qz)+2*np.multiply(qx, qw)
    
    
    Zx = 2*np.multiply(qx, qz)+2*np.multiply(qy, qw)
    Zy = 2*np.multiply(qy, qz)-2*np.multiply(qx, qw)
    Zz = 1-2*np.multiply(qx, qx)-2*np.multiply(qy, qy)
    
    rot = np.array([[Xx, Yx, Zx], [Xy, Yy, Zy], [Xz, Yz, Zz]])
    if len(rot.shape) == 3:
        rot = rot.transpose(2,0,1)
    return rot

x_max = np.max(data[:,1])
x_min = np.min(data[:,1])
y_max = np.max(data[:,2])
y_min = np.min(data[:,2])
z_max = np.max(data[:,3])
z_min = np.min(data[:,3])

x_scale = np.sqrt(x_max-x_min) / 10
y_scale = np.sqrt(y_max-y_min) / 10
z_scale = np.sqrt(z_max-z_min) / 10

cam_rot = quat_to_rot(data[:,4], data[:,5], data[:,6], data[:,7])

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.set_xlim(x_min,x_max)
ax.set_ylim(y_min,y_max)
ax.set_zlim(z_min,z_max)


for i in range(len(data)-1):
    x = data[i,1]
    y = data[i,2]
    z = data[i,3]
    
    x_ = data[i+1,1]
    y_ = data[i+1,2]
    z_ = data[i+1,3]
    
    Xx = cam_rot[i,0,0]
    Xy = cam_rot[i,1,0]
    Xz = cam_rot[i,2,0]
    
    Yx = cam_rot[i,0,1]
    Yy = cam_rot[i,1,1]
    Yz = cam_rot[i,2,1]
    
    Zx = cam_rot[i,0,2]
    Zy = cam_rot[i,1,2]
    Zz = cam_rot[i,2,2]
    
#     print(Xx, Xy, Xz)
#     print(Yx, Yy, Yz)
#     print(Xx*Yx + Xy*Yy + Xz*Yz)
    print(Zx, Zy, Zz)
#     raise
    
#     print(Zx*Zx + Zy*Zy + Zz*Zz)
    
    ax.arrow3D(x, y, z,
               x_-x, y_-y, z_-z,
               mutation_scale=7,
               arrowstyle="->",
               linestyle='solid',
               ec='black')
        
    ax.arrow3D(x, y, z,
               Xx*x_scale, Xy*x_scale, Xz*x_scale,
               mutation_scale=7,
               arrowstyle="-",
               linestyle='solid',
               ec='red')
    ax.arrow3D(x, y, z,
               Yx*y_scale, Yy*y_scale, Yz*y_scale,
               mutation_scale=7,
               arrowstyle="-",
               linestyle='solid',
               ec='green')
    ax.arrow3D(x, y, z,
               Zx*z_scale, Zy*z_scale, Zz*z_scale,
               mutation_scale=7,
               arrowstyle="-",
               linestyle='solid',
               ec='blue')

ax.set_title('3D Arrows Demo')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
fig.set_size_inches(11,8)
fig.tight_layout()
plt.show()